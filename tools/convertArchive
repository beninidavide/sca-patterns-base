#!/bin/bash
##############################################################################
#  Copyright (C) 2011 Novell, Inc.
##############################################################################
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; version 2 of the License.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#  Authors/Contributors:
#   Jason Record (jrecord@novell.com)
#  Modification Date:  2011 Aug 29
##############################################################################

title() {
	echo "###################################################################"
	echo "#  Archive Converter v1.0.5"
	echo "###################################################################"
	echo
}

show_help() {
	echo "Usage:"
	echo "  $THIS [-hf][-b Base][-p Product]"
	echo
	echo "  -h   This help screen"
	echo "  -d description"
	echo "       Archive specific description. Descriptions are taken from"
	echo "       directory names starting with a + to the end of the directory"
	echo "       name. Directory descriptions override the -d startup option."
	echo "       Example Archive:      nts_server_110829_1023+failed_mount-point"
	echo "       Extracted Descrition: failed_mount-point"
	echo "  -b base"
	echo "       Changes the base directory to where archives are moved"
	echo "  -f   Force directories to be reprocessed"
	echo "  -p prod"
	echo "       Substitute your product identifier"
	echo
}

extractFile() {
	printf "Extracting > "
	RCODE=0 # assume no errors
	CMP=$(echo $ITEM | awk -F\. '{print $NF}')
	case $CMP in
	tbz|TBZ) CMPARGS='jxf' ;;
	tgz|TGZ) CMPARGS='zxf' ;;
	*) CMPARGS='' ;;
	esac
	if [ -n "$CMPARGS" ]; then
		XDIR=$(mktemp -d ${PWD}/${THIS_FILE}.XXXXXXXXXX)
		cd $XDIR
		tar $CMPARGS $ITEM &>/dev/null
		TRC=$?
		if [ $TRC -gt 0 ]; then
			printf "Extraction > "
			RCODE=2
			((TOTAL_ERRORS++))
		else
			LEAFDIR=$(ls -1)
			if [ -d ../$LEAFDIR ]; then
				printf "Duplicate > "
				RCODE=5
				((TOTAL_ERRORS++))
			else
				mv ${XDIR}/${LEAFDIR} ..
				cd ..
				DIRNAME="${PWD}/${LEAFDIR}"
				cd $XDIR
				TFILE="$DIRNAME/$THIS_FILE"
				rm -f $ITEM
				((TOTAL_FILES++))
			fi
		fi
		cd ..
		rm -rf $XDIR
	else
		printf "Invalid file > "
		RCODE=1
		((TOTAL_ERRORS++))
	fi
	return $RCODE
}

convertName() {
	HOST=$(grep -A1 'uname -a' $BENV | tail -1 | awk '{print $2}')
	SCTEST=$(grep 'Command with Args' $SCINFO | awk '{print $5}')
	case $SCTEST in
	'-bg' ) SCRUN="nsa_" ;;
	'-#') SCRUN="nsa_"; PROD="nsacheck_" ;;
	'-m' ) SCRUN="min_" ;;
	'-A' ) SCRUN="full_" ;;
	'-L' ) SCRUN="fslist_" ;;
	*) SCRUN='' ;;
	esac

	DTSTRING=$(grep -A1 '^# /bin/date' $BENV | tail -1)
	if [ -z "$DTSTRING" ]; then
		SCDT=$(date +"%y%m%d_%H%M%S")
	else
		SC_TIME=$(echo $DTSTRING | awk '{print $4}' | sed -e 's/://g')
		SC_YEAR=$(echo $DTSTRING | awk '{print $6}')
		SC_MONTHSTR=$(echo $DTSTRING | awk '{print $2}')
		SC_DAY=$(echo $DTSTRING | awk '{print $3}')
		case $SC_MONTHSTR in
		Jan) SC_MONTH='01' ;;
		Feb) SC_MONTH='02' ;;
		Mar) SC_MONTH='03' ;;
		Apr) SC_MONTH='04' ;;
		May) SC_MONTH='05' ;;
		Jun) SC_MONTH='06' ;;
		Jul) SC_MONTH='07' ;;
		Aug) SC_MONTH='08' ;;
		Sep) SC_MONTH='09' ;;
		Oct) SC_MONTH='10' ;;
		Nov) SC_MONTH='11' ;;
		Dec) SC_MONTH='12' ;;
		esac
		SCDT="${SC_YEAR}${SC_MONTH}${SC_DAY}_${SC_TIME}"
	fi

	if grep -i 'Novell Open Enterprise Server 11' $BENV &>/dev/null; then
		DIST="oes11"
		DISTNAME="Novell Open Enterprise Server 11"
		ARCH=$(grep -i "$DISTNAME" $BENV | head -1 | awk -F\( '{print $2}' | awk -F\) '{print $1}')
		SP="sp$(grep -i -A4 "$DISTNAME" $BENV | head -4 | grep PATCHLEVEL | awk '{print $3}')"
		if [ "$SP" == "sp" ]; then
			SP=ship
		elif [ "$SP" == "sp0" ]; then
			SP=ship
		fi
		ARCH="${ARCH}_"
		SP="${SP}_"
	elif grep -i 'Novell Open Enterprise Server 2' $BENV &>/dev/null; then
		DIST="oes2"
		DISTNAME="Novell Open Enterprise Server 2"
		ARCH=$(grep -i "$DISTNAME" $BENV | head -1 | awk -F\( '{print $2}' | awk -F\) '{print $1}')
		SP="sp$(grep -i -A4 "$DISTNAME" $BENV | head -4 | grep PATCHLEVEL | awk '{print $3}')"
		if [ "$SP" == "sp" ]; then
			SP=ship
		elif [ "$SP" == "sp0" ]; then
			SP=ship
		fi
		ARCH="${ARCH}_"
		SP="${SP}_"
	elif grep 'Novell Open Enterprise Server' $BENV &>/dev/null; then
		DIST="oes1"
		DISTNAME="Novell Open Enterprise Server"
		ARCH=$(grep -i "$DISTNAME" $BENV | head -1 | awk -F\( '{print $2}' | awk -F\) '{print $1}')
		SP="sp$(grep -i -A4 "$DISTNAME" $BENV | head -4 | grep PATCHLEVEL)"
		if echo $SP | grep -i SP4 &>/dev/null; then
			SP=sp4
		elif echo $SP | grep -i SP3 &>/dev/null; then
			SP=sp3
		elif echo $SP | grep -i SP2 &>/dev/null; then
			SP=sp2
		elif echo $SP | grep -i SP1 &>/dev/null; then
			SP=sp1
		else
			SP=ship
		fi
		ARCH="${ARCH}_"
		SP="${SP}_"
	elif grep -i 'SUSE Linux Enterprise Server 11' $BENV &>/dev/null; then
		DIST="sles11"
		DISTNAME="SUSE Linux Enterprise Server 11"
		ARCH=$(grep -i "$DISTNAME" $BENV | head -1 | awk -F\( '{print $2}' | awk -F\) '{print $1}')
		SP="sp$(grep -i -A4 "$DISTNAME" $BENV | head -4 | grep PATCHLEVEL | awk '{print $3}')"
		if [ "$SP" == "sp" ]; then
			SP=ship
		elif [ "$SP" == "sp0" ]; then
			SP=ship
		fi
		ARCH="${ARCH}_"
		SP="${SP}_"
	elif grep -i 'SUSE Linux Enterprise Desktop 11' $BENV &>/dev/null; then
		DIST="sled11"
		DISTNAME="SUSE Linux Enterprise Desktop 11"
		ARCH=$(grep -i "$DISTNAME" $BENV | head -1 | awk -F\( '{print $2}' | awk -F\) '{print $1}')
		SP="sp$(grep -i -A4 "$DISTNAME" $BENV | head -4 | grep PATCHLEVEL | awk '{print $3}')"
		if [ "$SP" == "sp" ]; then
			SP=ship
		elif [ "$SP" == "sp0" ]; then
			SP=ship
		fi
		ARCH="${ARCH}_"
		SP="${SP}_"
	elif grep -i 'SUSE Linux Enterprise Server 10' $BENV &>/dev/null; then
		DIST="sles10"
		DISTNAME="SUSE Linux Enterprise Server 10"
		ARCH=$(grep -i "$DISTNAME" $BENV | head -1 | awk -F\( '{print $2}' | awk -F\) '{print $1}')
		SP="sp$(grep -i -A4 "$DISTNAME" $BENV | head -4 | grep PATCHLEVEL | awk '{print $3}')"
		if [ "$SP" == "sp" ]; then
			SP=ship
		elif [ "$SP" == "sp0" ]; then
			SP=ship
		fi
		ARCH="${ARCH}_"
		SP="${SP}_"
	elif grep -i 'SUSE Linux Enterprise Desktop 10' $BENV &>/dev/null; then
		DIST="sled10"
		DISTNAME="SUSE Linux Enterprise Desktop 10"
		ARCH=$(grep -i "$DISTNAME" $BENV | head -1 | awk -F\( '{print $2}' | awk -F\) '{print $1}')
		SP="sp$(grep -i -A4 "$DISTNAME" $BENV | head -4 | grep PATCHLEVEL | awk '{print $3}')"
		if [ "$SP" == "sp" ]; then
			SP=ship
		elif [ "$SP" == "sp0" ]; then
			SP=ship
		fi
		ARCH="${ARCH}_"
		SP="${SP}_"
	elif grep -i 'SUSE LINUX Enterprise Server 9' $BENV &>/dev/null; then
		DIST="sles9"
		DISTNAME="SUSE LINUX Enterprise Server 9"
		ARCH=$(grep -i "$DISTNAME" $BENV | head -1 | awk -F\( '{print $2}' | awk -F\) '{print $1}')
		SP="sp$(grep -i -A4 "$DISTNAME" $BENV | head -4 | grep PATCHLEVEL | awk '{print $3}')"
		if [ "$SP" == "sp" ]; then
			SP=ship
		elif [ "$SP" == "sp0" ]; then
			SP=ship
		fi
		ARCH="${ARCH}_"
		SP="${SP}_"
	elif grep -A4 -i '-release' $BENV | grep 'openSUSE' &>/dev/null; then
		DIST="openSUSE_"
		ARCH=$(grep -A4 -i '-release' $BENV | grep 'openSUSE' | head -1 | awk -F\( '{print $2}' | awk -F\) '{print $1}')
		SP="v$(grep -A4 -i '-release' $BENV | grep 'openSUSE' | awk '{print $2}' | sed -e 's/\./-/g')"
		ARCH="${ARCH}_"
		SP="${SP}_"
	else
		DIST=''
		SP=''
		ARCH=''
		SCRUN=''
	fi
	if echo "$DIRNAME" | grep '+' &>/dev/null; then
		DESC="$(echo "$DIRNAME" | awk -F+ '{print $NF}')_"
	fi
	NEWDIRNAME="${BASEDIR}/nts_${DIST}${SP}${PROD}${DESC}${ARCH}${SCRUN}${HOST}_${SCDT}"
}

positionDirectory() {
	if [ -d $NEWDIRNAME ]; then
		TMPDIR="${NEWDIRNAME}_`date +%N`"
		while [ -d $TMPDIR ]
		do
			TMPDIR="${NEWDIRNAME}_`date +%N`"
		done
		NEWDIRNAME=$TMPDIR
	fi
	printf "Moved > "
	mv $DIRNAME $NEWDIRNAME
	TFILE="$NEWDIRNAME/$THIS_FILE"
}

convertDirectory() {
	DIRNAME=$(dirname $TFILE)
	BENV="$DIRNAME/basic-environment.txt"
	SCINFO="$DIRNAME/supportconfig.txt"
	printf "Converting > "
	if [ -e $TFILE ]; then
		if (( REDO )); then
			printf "Forced > "
			if [ -z "$PROD" ]; then
				PROD=$(grep '^PROD=' $TFILE | cut -d= -f2 | sed -e "s/\'//g;s/\"//g")
				if [ -z "$PROD" ]; then
					PROD=$(basename $PWD)
					[ "$PROD" = "$BASEPROD" ] && PROD='' || PROD="${PROD}_"
				fi
			fi
			convertName
			positionDirectory
			markComplete
			((TOTAL_DIR++))
		else
			echo "Nothing to Do"
		fi
	else
		if [ -z "$PROD" ]; then
			PROD=$(basename $PWD)
			[ "$PROD" = "$BASEPROD" ] && PROD='' || PROD="${PROD}_"
		fi
		convertName
		positionDirectory
		markComplete
		((TOTAL_DIR++))
	fi
}

markComplete() {
	title > $TFILE
	date >> $TFILE
	echo "PROD=$PROD" >> $TFILE
	echo "Complete"
	echo " Converted: $NEWDIRNAME"
}

removeDirectory() {
	if [ "$PWD" != "$BASEDIR" ]; then
		LEAF=$(basename $PWD)
		cd ..
		rmdir $LEAF
	fi
}

showSummary() {
	echo "-------------------------------------"
	FMT='%-25s %d\n'
	printf "$FMT" "Errors" $TOTAL_ERRORS
	printf "$FMT" "Files Processed" $TOTAL_FILES
	printf "$FMT" "Directories Converted" $TOTAL_DIR
	echo
}

BASEDIR="/mnt/spr"
BASEPROD=$(basename $BASEDIR)
DESC=''
THIS=$(basename $0)
THIS_FILE="zZz_${THIS}.txt"
REDO=0
TFILE=''
DIRNAME=''
PROD=''
NEWDIRNAME=''
TOTAL_FILES=0
TOTAL_DIR=0
TOTAL_ERRORS=0


################################################################################
# main
################################################################################
clear
title
while getopts :hb:d:p:f TMPOPT
do
	case $TMPOPT in
	\:)
		case $OPTARG in
		*) echo "ERROR: Missing Argument -$OPTARG"
		;;
		esac
		echo; show_help; exit 0 ;;
	\?)
		case $OPTARG in
		*) echo "ERROR: Invalid Option -$OPTARG"
		;;
		esac
		echo; show_help; exit 0 ;;
	d) DESC="${OPTARG}_" ;;
	b) BASEDIR="$OPTARG" ;;
	p) PROD="${OPTARG}_" ;;
	f) REDO=1 ;;
	h) show_help; exit 0 ;;
	esac
done

ITEM_LIST=$(ls -1 | grep '^nts_')
if [ -n "$ITEM_LIST" ]; then
	if [ "$PWD" = "$BASEDIR" ]; then
		if (( REDO )); then
			echo "Override activated, running in base directory."
			echo
		else
			echo "ERROR: Running in base directory."
			echo "  Use -f to override, but product flag will be removed"
			echo
			exit 3
		fi
	fi

	for ITEM in $ITEM_LIST
	do
		ITEM="${PWD}/$ITEM"
		echo "Processing $ITEM"
		printf " Status: "
		if [ -d $ITEM ]; then
			TFILE="${ITEM}/$THIS_FILE"
			printf "Directory > "
			convertDirectory
		elif [ -f $ITEM ]; then
			printf "File > "
			extractFile
			XRC=$?
			if [ $XRC -gt 0 ]; then
				echo "Error $XRC"
			else
				convertDirectory
			fi
		else
			echo Skipped
		fi
		echo
	done
	removeDirectory
	showSummary
else
	ls -l $LS_OPTIONS
	echo
	echo "No nts_* entries to process."
fi
echo

