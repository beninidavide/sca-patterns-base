#!/bin/bash
# Description:
#  Tests all the patterns in the SPR repository against each of the archive directories
#  in the selected archive directory. If you specify a pattern on the command line, a report
#  for that pattern alone is generated.
#

SPRSRC="/opt/svnwork/server-diagnostic-patterns/trunk/packages/patterns"
BASHLIB="${SPRSRC}/lib/bash"
PERL5LIB="${PERL5LIB}:${SPRSRC}/lib/perl/"
PYTHONPATH="${PYTHONPATH}:${SPRSRC}/lib/python/"
export SPRSRC BASHLIB PERL5LIB PYTHONPATH

title() {
	echo "##################################################################################"
	echo "# NSA Pattern to Archive Checker v1.7.0"
	echo "##################################################################################"
	echo
}
CMCNT=0

check_meta() {
	PAT=$1
	MET_CAT=0
	MET_DAT=0
	MET_REV=0
	MET_TTL=0
	MET_TTS=0
	MET_DES=0
	MET_PRD=0
	MET_DIS=0
	MET_ARC=0
	MET_LNK=0
	MET_TID=0
	MET_BUG=0
	MET_PLK=0
	MET_OUT=0
	MET_MIS=0
	MET_OS=0
	CHECK=""

	TMP1=$(grep '^#META-CATEGORY' $PAT 2>/dev/null | cut -d= -f2 | sed -e 's/[[:space:]]*//g')
	TMP2=$(grep '^$META_CATEGORY' $PAT 2>/dev/null | cut -d= -f2 | cut -d\; -f1 | sed -e 's/[[:space:]]*//g;s/"//g')
	if [ "$TMP1" != "$TMP2" ]; then
		((MET_CAT++))
	elif [ "$TMP1" == "" ]; then
		((MET_CAT++))
	fi
	TMP3=$(dirname $PAT)
	TMP3=$(basename $TMP3)

	if [ "$TMP3" != "$TMP1" -o "$TMP3" != "$TMP2" ]; then
		((MET_DAT++))
	fi

	TMP1=$(grep '^$PRIMARY_LINK' $PAT 2>/dev/null | cut -d= -f2 | cut -d\; -f1 | sed -e 's/[[:space:]]*//g;s/"//g')
	TMP2=$(grep "^#${TMP1}" $PAT 2>/dev/null)
	if [ "$TMP2" == "" ]; then
		((MET_PLK++))
	fi

	TMP2=$(grep '^#META-REVISION' $PAT 2>/dev/null | cut -d= -f2 | sed -e 's/[[:space:]]*//g;s/\.//g')
	if [ "$TMP2" == "" ]; then
		((MET_REV++))
	elif echo $TMP2 | grep "[:alpha:]" &> /dev/null; then
		((MET_REV++))
	elif [ $TMP2 -lt 1 ]; then
		((MET_REV++))
	fi

	TMP2=$(grep '^#META-TITLE' $PAT 2>/dev/null | cut -d= -f2 | sed -e 's/[[:space:]]*//g')
	if [ "$TMP2" == "" ]; then
		((MET_TTL++))
	elif echo $TMP2 | grep '^(' &> /dev/null; then
		((MET_TTL++))
	elif [ ${#TMP2} -gt 60 ]; then
		((MET_TTS++))
	fi

	TMP2=$(grep '^#META-DESCRIPTION' $PAT 2>/dev/null | cut -d= -f2 | sed -e 's/[[:space:]]*//g')
	if [ "$TMP2" == "" ]; then
		((MET_DES++))
	elif echo $TMP2 | grep '^(' &> /dev/null; then
		((MET_DES++))
	fi

	TMP2=$(grep '^#META-PRODUCT' $PAT 2>/dev/null | cut -d= -f2 | sed -e 's/[[:space:]]*//g')
	if [ "$TMP2" == "" ]; then
		((MET_PRD++))
	elif echo $TMP2 | grep '^(' &> /dev/null; then
		((MET_PRD++))
	fi

	TMP2=$(grep '^#META-OS' $PAT 2>/dev/null | cut -d= -f2 | sed -e 's/[[:space:]]*//g')
	if [ "$TMP2" == "" ]; then
		((MET_OS++))
	elif echo $TMP2 | grep '^(' &> /dev/null; then
		((MET_OS++))
	fi

	TMP2=$(grep '^#META-DISTRO' $PAT 2>/dev/null | cut -d= -f2 | sed -e 's/[[:space:]]*//g')
	if [ "$TMP2" == "" ]; then
		((MET_DIS++))
	elif echo $TMP2 | grep '^(' &> /dev/null; then
		((MET_DIS++))
	fi

	TMP2=$(grep '^#META-ARCH' $PAT 2>/dev/null | cut -d= -f2 | sed -e 's/[[:space:]]*//g')
	if [ "$TMP2" == "" ]; then
		((MET_ARC++))
	elif echo $TMP2 | grep '^(' &> /dev/null; then
		((MET_ARC++))
	fi

	TMP2=$(grep '^#META-LINK' $PAT 2>/dev/null | cut -d= -f2 | sed -e 's/[[:space:]]*//g')
	if [ "$TMP2" == "" ]; then
		((MET_LNK++))
	elif echo $TMP2 | grep '^(' &> /dev/null; then
		((MET_LNK++))
	fi

	TMP2=$(grep '^#META-LINK-TID' $PAT 2>/dev/null | cut -d= -f2 | egrep 'http://www.suse.com|http://www.novell.com|http://www.netiq.com' | grep 'kb/doc.php?id=[[:digit:]]')
	if [ -n "$TMP2" ]; then
		((MET_TID++))
	fi

	TMP2=$(grep '^#META-LINK-BUG' $PAT 2>/dev/null | cut -d= -f2 | grep -v '[[:digit:]]')
	if [ -n "$TMP2" ]; then
		((MET_BUG++))
	fi

	MDLOW=$(grep -n '#<<BEGIN PATTERN METADATA>>' $PAT 2>/dev/null | cut -d\: -f1)
	MDHIGH=$(grep -n '#<<END PATTERN METADATA>>' $PAT 2>/dev/null | cut -d\: -f1)
	if [ "$MDLOW" == "" -o "$MDHIGH" == "" ]; then
		((MET_MIS++))
	else
		for i in $(grep -n '^#META-' $PAT 2>/dev/null | cut -d\: -f1)
		do
			if [ $i -lt $MDLOW -o $i -gt $MDHIGH ]; then
				((MET_OUT++))
			fi
		done
	fi


	MET_TOTAL=$((MET_CAT + MET_DAT + MET_REV + MET_TTL + MET_DES + MET_PRD + MET_DIS + MET_ARC + MET_LNK + MET_PLK + MET_MIS + MET_OUT + MET_TID + MET_BUG + MET_TTS + MET_OS))
	if [ $MET_TOTAL -gt 0 ]; then
		((RET_NSA++))
		test $MET_CAT -gt 0 && CHECK="Category"
		test $MET_DAT -gt 0 && CHECK="${CHECK} DirCategoryMismatch"
		test $MET_REV -gt 0 && CHECK="${CHECK} Revision"
		test $MET_TTL -gt 0 && CHECK="${CHECK} Title"
		test $MET_TTS -gt 0 && CHECK="${CHECK} TitleLength60"
		test $MET_DES -gt 0 && CHECK="${CHECK} Description"
		test $MET_PRD -gt 0 && CHECK="${CHECK} Product"
		test $MET_OS  -gt 0 && CHECK="${CHECK} OperatingSystem"
		test $MET_DIS -gt 0 && CHECK="${CHECK} Distribution"
		test $MET_ARC -gt 0 && CHECK="${CHECK} Arch"
		test $MET_LNK -gt 0 && CHECK="${CHECK} Link"
		test $MET_TID -gt 0 && CHECK="${CHECK} InvalidTID"
		test $MET_BUG -gt 0 && CHECK="${CHECK} InvalidBUG"
		test $MET_PLK -gt 0 && CHECK="${CHECK} PrimaryLink"
		test $MET_MIS -gt 0 && CHECK="${CHECK} MissingMetaData"
		test $MET_OUT -gt 0 && CHECK="${CHECK} MetaBoundaries"
		META_CHECK="META_CHECK=$CHECK"
	else
		META_CHECK="META_CHECK=OK"
		((RET_PAS++))
	fi
	((CURRENT++))
	return $MET_TOTAL
}


#######################################################################
# main
#######################################################################

clear
title
BASE=$(basename $0)
PERL_ERROR_LIMIT=0
META_CHECK=""
SINGLE_PATTERN=$1

if [ -d ${ARCHDIR:=/mnt/spr/} -a -d ${PATDIR:=/opt/svnwork/server-diagnostic-patterns/trunk/packages/patterns/} ]; then
	if [ "$ARCHDIR" = "/mnt/spr/" -a -d /mnt/spr/nts_patreport ]; then
		ARCHDIR="/mnt/spr/nts_patreport/"
	fi
	echo "Pattern Directory: $PATDIR"
	echo "Archive Directory: $ARCHDIR"
	echo
	if [ -n "$SINGLE_PATTERN" ]; then
		if [ -f $SINGLE_PATTERN ]; then
			PATLIST=$(readlink -f $SINGLE_PATTERN)
			CHK_FILE="${HOME}/${BASE}-$(basename $PATLIST).csv"
		else
			PATLIST=$(find $PATDIR -type f | grep -v '\.svn' | grep "$SINGLE_PATTERN" | head -1 )
			CHK_FILE="${HOME}/${BASE}-$(basename $PATLIST).csv"
		fi
	else
		PATLIST=$(find $PATDIR -type f | grep 'pl$')
		PATLIST=$(find $PATDIR -type f -perm /100 | egrep -v '\.svn|/lib/')
		CHK_FILE="${HOME}/${BASE}.csv"
	fi
	ARCHLIST=$(find $ARCHDIR -maxdepth 1 -type d | grep "nts_")
	PATCOUNT=$(echo $PATLIST | wc -w)
	ARCHCOUNT=$(echo $ARCHLIST | wc -w)
	CURRENT=0
	RET_PAS=0
	RET_NSA=0
	RET_PRL=0

	PAT_GRN=0
	PAT_REC=0
	PAT_PRO=0
	PAT_YEL=0
	PAT_RED=0
	PAT_ERR=0

	TOTAL=$(( (PATCOUNT * ARCHCOUNT) + PATCOUNT ))
	RUNDATE=$(date +"%F %T")
	RUNSTART=$(date +%s)

	cd $PATDIR
	> $CHK_FILE
	printf "Checking $PATCOUNT SDP Patterns against $ARCHCOUNT Archive(s).\n\n"
	echo "----[ Meta ]-----   ---------[ Pattern ]---------   -----[ Status ]------"
	printf "%5s %5s %5s %6s %4s %4s %4s %4s %4s %7s %6s %8s\n" Pass NSA Pat Err Cri Wrn Pro Rec Suc Test Total Progress
	# check for duplicates
	PATCNT1=$(echo "$PATLIST" | awk -F\/ '{print $NF}' | sort | wc -l)
	PATCNT2=$(echo "$PATLIST" | awk -F\/ '{print $NF}' | sort | uniq | wc -l)
	if [ $PATCNT1 -ne $PATCNT2 ]; then
		((RET_NSA++))
		PLORIG=$(mktemp /tmp/pl-orig-XXXXXXXXXX)
		PLUNIQ=$(mktemp /tmp/pl-uniq-XXXXXXXXXX)
		echo "$PATLIST" | awk -F\/ '{print $NF}' | sort > $PLORIG
		cat $PLORIG | uniq > $PLUNIQ
		diff $PLORIG $PLUNIQ
		rm -f $PLORIG $PLUNIQ
	fi

	for PAT in $PATLIST
	do
		check_meta $PAT
		META_ERRORS=$?
		PAT_FILE=$(echo $PAT | sed -e "s|${PATDIR}/||")
		for ARCH in $ARCHLIST
		do
			((CURRENT++))
			PERCENT=$(( CURRENT * 100 / TOTAL ))
			printf "%5s %5s %5s %6s %4s %4s %4s %4s %4s %7s %6s %7s%%\r" $RET_PAS $RET_NSA $RET_PRL $PAT_ERR $PAT_RED $PAT_YEL $PAT_PRO $PAT_REC $PAT_GRN $CURRENT $TOTAL $PERCENT
			PATOUT=$($PAT -p $ARCH 2>/dev/null)
			PRC=$?
			if [ $PRC -gt $PERL_ERROR_LIMIT ]; then
				((RET_PRL++))
				echo "FATAL + $PRC RC|${RUNDATE}|${PAT_FILE}|${ARCH}|${META_CHECK}" >> $CHK_FILE
			else
				if [ $META_ERRORS -gt 0 ]; then
					SFLAG="FATAL + "
				else
					SFLAG=""
				fi
				OVERALL=$(echo $PATOUT | cut -d\| -f4 | cut -d= -f2)
				if [ -z "$OVERALL" ]; then
					OVERALL=-1
				fi
				case $OVERALL in
				5) ((PAT_ERR++)); echo "${SFLAG}5 ERROR|${RUNDATE}|${PAT_FILE}|${ARCH}|${META_CHECK}|${PATOUT}" >> $CHK_FILE ;;
				4) ((PAT_RED++)); echo "${SFLAG}3 CRITICAL|${RUNDATE}|${PAT_FILE}|${ARCH}|${META_CHECK}|${PATOUT}" >> $CHK_FILE ;;
				3) ((PAT_YEL++)); echo "${SFLAG}2 WARNING|${RUNDATE}|${PAT_FILE}|${ARCH}|${META_CHECK}|${PATOUT}" >> $CHK_FILE ;;
				2) ((PAT_PRO++)); echo "${SFLAG}4 PROMOTION|${RUNDATE}|${PAT_FILE}|${ARCH}|${META_CHECK}|${PATOUT}" >> $CHK_FILE ;;
				1) ((PAT_REC++)); echo "${SFLAG}1 RECOMMEND|${RUNDATE}|${PAT_FILE}|${ARCH}|${META_CHECK}|${PATOUT}" >> $CHK_FILE ;;
				0) ((PAT_GRN++)); echo "${SFLAG}0 SUCCESS|${RUNDATE}|${PAT_FILE}|${ARCH}|${META_CHECK}|${PATOUT}" >> $CHK_FILE ;;
				esac
			fi
		done
	done
	echo
	RET_PRL_PCT=$((RET_PRL*100/TOTAL))
	RET_NSA_PCT=$((RET_NSA*100/TOTAL))
	PAT_ERR_PCT=$((PAT_ERR*100/TOTAL))
	PAT_RED_PCT=$((PAT_RED*100/TOTAL))
	PAT_YEL_PCT=$((PAT_YEL*100/TOTAL))
	PAT_PRO_PCT=$((PAT_PRO*100/TOTAL))
	PAT_REC_PCT=$((PAT_REC*100/TOTAL))
	PAT_GRN_PCT=$((PAT_GRN*100/TOTAL))
	printf "%11s%% %4s%% %5s%% %3s%% %3s%% %3s%% %3s%% %3s%%\n\n" $RET_NSA_PCT $RET_PRL_PCT $PAT_ERR_PCT $PAT_RED_PCT $PAT_YEL_PCT $PAT_PRO_PCT $PAT_REC_PCT $PAT_GRN_PCT
	mv ${CHK_FILE} ${CHK_FILE}$$
	echo "Severity|Run Date|Pattern File|Archive|MetaData Check|Meta Category|Pattern ID|Primary Link|Overall|Overall Info|Optional Key|Optional Value =>" > $CHK_FILE
	cat ${CHK_FILE}$$ | sort -r >> ${CHK_FILE}
	rm -f ${CHK_FILE}$$

	echo "Test Begin:               ${RUNDATE}"
	echo "Test End:                 $(date +"%F %T")"
	RUNEND=$(date +%s)
	RUNSECONDS=$((RUNEND - RUNSTART))
	RUNMIN=$((RUNSECONDS / 60))
	RUNMINR=$((RUNSECONDS % 60))
	echo "Elasped Time:             ${RUNMIN} min, ${RUNMINR} sec"
	echo "Counted Test Cases:       $((RET_NSA + RET_PRL + PAT_ERR + PAT_RED + PAT_YEL + PAT_PRO + PAT_REC + PAT_GRN))"
	echo "Pattern Test Result File: $CHK_FILE"
	echo 'CSV Field Separator:      |'
	echo
	echo "##################################################################################"
else
	echo "Pattern Directory: $PATDIR"
	echo "Archive Directory: $ARCHDIR"
	echo
	echo "ERROR: Invalid or missing directory"
	echo
	echo "Usage: $(basename $0)"
	echo
fi
echo

