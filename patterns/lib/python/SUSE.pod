=head1 NAME

SUSE.py

=head1 SYNOPSIS

import SUSE

=head1 DESCRIPTION

The Supportconfig Analysis Pattern library for Python on the SUSE OS

=head1 CONSTANTS

SLE9GA
SLE9SP1
SLE9SP2
SLE9SP3
SLE9SP4
SLE9SP5
SLE10GA
SLE10SP1
SLE10SP2
SLE10SP3
SLE10SP4
SLE10SP5
SLE11GA
SLE11SP1
SLE11SP2
SLE11SP3
SLE11SP4
SLE12GA

=head1 FUNCTIONS

=head2 packageInstalled(PackageName)

=over 2

=item Description

Checks if PackageName is installed

=item Requires

The RPM package name

=item Returns

True  if the RPM package is installed

False if the RPM package is not installed

=item Example

	PACKAGE = 'aaa_base'
	if( SUSE.packageInstalled(PACKAGE) ):
		Core.updateStatus(Core.WARN, "Package is installed: " + PACKAGE)
	else:
		Core.updateStatus(Core.ERROR, "Package is NOT installed: " + PACKAGE)

=back

=cut

=begin html

<hr>

=end html

=head2 getRpmInfo(PackageName)

=over 2

=item Description

Returns detailed information about PackageName

=item Requires

The RPM package name

=item Returns

A dictionary with elements: name, version, vendor, installTime

=item Example

	PACKAGE = 'aaa_base'
	RPM_INFO = SUSE.getRpmInfo(PACKAGE)
	if( len(RPM_INFO) > 0 ):
		Core.updateStatus(Core.WARN, "Package installed: " + RPM_INFO['name'] + ", with version: " + RPM_INFO['version'])
	else:
		Core.updateStatus(Core.ERROR, "Package is NOT installed: " + RPM_INFO['name'])

=back

=cut

=begin html

<hr>

=end html

=head2 getDriverInfo(DRIVER_NAME)

=over 2

=item Description

Gets detailed information about the kernel DRIVER_NAME

=item Requires

The name of the kernel driver

=item Returns

A dictionary with elements: name, loaded, filename, version, license, description, srcversion, supported, vermagic

=item Example

	DRIVER = 'cdrom'
	DRIVER_INFO = SUSE.getDriverInfo(DRIVER)
	if( DRIVER_INFO['loaded'] ):
		Core.updateStatus(Core.WARN, "Driver " + DRIVER_INFO['name'] + " loaded, Supported = " + DRIVER_INFO['supported'])
	else:
		Core.updateStatus(Core.ERROR, "Driver " + DRIVER_INFO['name'] + " is not loaded")

=back

=cut

=begin html

<hr>

=end html

=head2 compareRPM(package, versionString)

=over 2

=item Description

Compares the RPM package version in supportconfig with the versionString specified

=item Requires

The package specified to be installed

The RPM package name to compare

An RPM version string to compare against

=item Returns

Returns -1 if package is older then versionString

Returns 0 if package is the same version as versionString

Returns 1 if package is newer then versionString

=item Example

	PACKAGE = 'aaa_base'
	VERSION = '11-6.90.1'
	if( SUSE.packageInstalled(PACKAGE) ):
		RESULT = SUSE.compareRPM(PACKAGE, VERSION)
		if( RESULT > 0 ):
			Core.updateStatus(Core.SUCC, PACKAGE + " is newer than " + VERSION)
		elsif( RESULT < 0 ):
			Core.updateStatus(Core.WARN, PACKAGE + " is older than " + VERSION)
		else:
			Core.updateStatus(Core.CRIT, PACKAGE + " matches " + VERSION)
	else:
		Core.updateStatus(Core.ERROR, "Package is NOT installed: " + PACKAGE)

=back

=cut

=begin html

<hr>

=end html

=head2 compareKernel(kernelVerion)

=over 2

=item Description

Compares the kernel version to the kernelVersion string given

=item Requires

A kernel version string

=item Returns

Returns a -1 if kernel is older than kernelVersion

Returns a 0 if kernel is the same as kernelVersion

Returns a 1 if kernel is newer than kernelVersion

=item Example

	if( SUSE.compareKernel(Core.SLE10SP4) <= 0 ):
		Core.updateStatus(Core.WARN, "General Support has ended for earlier SLES/SLED Versions")
	else:
		Core.updateStatus(Core.ERROR, "System is supported, skipping test")

=back

=cut

=begin html

<hr>

=end html

=head2 getScInfo( )

=over 2

=item Description

Gets detailed information about supportconfig

=item Requires

Nothing

=item Returns

A dictionary with elements: envValue, kernelValue, cmdline, config, version, scriptDate

=item Example

	VERSION_FOUND = SUSE.getScInfo()['version']
	VERSION_REQUIRED = '2.25-372'
	if( Core.compareVersions(VERSION_FOUND, VERSION_REQUIRED) < 0 ):
		Core.updateStatus(Core.WARN, "Insufficient supportconfig version: " + VERSION_FOUND)
	else:
		Core.updateStatus(Core.ERROR, "Supportconfig version is sufficient, skipping test")

=back

=cut

=head1 CONTRIBUTORS

	David Hamner (dhamner@novell.com)
	Jason Record (jrecord@suse.com)

=head1 COPYRIGHT

Copyright (C) 2013 SUSE LLC

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; version 2 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

=cut

